package org.ods.core.test.usecase

import groovy.util.logging.Slf4j
import org.junit.rules.TemporaryFolder
import org.ods.core.test.LoggerStub
import org.ods.core.test.jira.JiraServiceForWireMock
import org.ods.core.test.usecase.levadoc.fixture.LevaDocDataFixture
import org.ods.core.test.usecase.levadoc.fixture.ProjectFixture
import org.ods.core.test.wiremock.WiremockServers

import org.ods.orchestration.mapper.LeVADocumentParamsMapper
import org.ods.orchestration.service.DocGenService
import org.ods.orchestration.usecase.BitbucketTraceabilityUseCase
import org.ods.orchestration.usecase.LeVADocumentUseCase
import org.ods.orchestration.usecase.LevaDocWiremock
import org.ods.orchestration.util.Project
import org.ods.services.BitbucketService
import org.ods.services.GitService
import org.ods.services.JenkinsService
import org.ods.services.NexusService
import org.ods.services.OpenShiftService
import org.ods.util.IPipelineSteps
import util.PipelineSteps
import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson

@Slf4j
class LevaDocUseCaseFactory {

    private LevaDocWiremock levaDocWiremock
    private TemporaryFolder tempFolder
    private JenkinsService jenkins
    private OpenShiftService os
    private GitService gitService
    private BitbucketTraceabilityUseCase bbt
    private IPipelineSteps steps
    private BitbucketService bitbucketService
    private JiraServiceForWireMock jiraServiceForWireMock
    private NexusService nexusService
    private DocGenService docGenService
    private Project project

    private class LeVADocumentParamsMapperWithLogging extends LeVADocumentParamsMapper {
        LeVADocumentParamsMapperWithLogging(Project project) {
            super(project)
        }
        Map build(Map data = [: ]) {
            Map result
            try {
                result = super.build(data)
            } catch(Throwable e) {
                log.error(e.getMessage(), e)
                throw e
            }

            log.info("--- INPUT GENERATED BY LeVADocumentParamsMapper.build(data) (start) ---")
            log.info(prettyPrint(toJson(result)))
            log.info("--- INPUT GENERATED BY LeVADocumentParamsMapper.build(data) (end) ---")
            return result
        }
    }

    LevaDocUseCaseFactory(LevaDocWiremock levaDocWiremock,
                          GitService gitService,
                          TemporaryFolder tempFolder,
                          JenkinsService jenkins,
                          OpenShiftService os,
                          BitbucketTraceabilityUseCase bbt,
                          BitbucketService bitbucketService,
                          String docGenUrl = null){

        this.levaDocWiremock = levaDocWiremock
        this.gitService = gitService
        this.os = os
        this.bbt = bbt
        this.bitbucketService = bitbucketService
        this.jenkins = jenkins
        this.tempFolder = tempFolder
        this.steps = new PipelineSteps()

        this.jiraServiceForWireMock = buildJiraServiceForWireMock()
        this.docGenService = buildDocGenService(docGenUrl)
        this.nexusService = buildNexusServiceForWireMock()
    }

    LeVADocumentUseCase build(ProjectFixture projectFixture){

        buildProject(projectFixture)

        return new LeVADocumentUseCase
            (
                project,
                docGenService,
                jenkins,
                nexusService,
                new LeVADocumentParamsMapperWithLogging(project),
                steps,
                new LoggerStub(log)
            )
    }

    Project getProject() {
        return this.project
    }

    private buildProject(ProjectFixture projectFixture) {
        ProjectFactory projectFactory = new ProjectFactory(steps, gitService, jiraServiceForWireMock, new LoggerStub(log))
        LevaDocDataFixture dataFixture = new LevaDocDataFixture(tempFolder.root)
        this.project = projectFactory.getProject(projectFixture, dataFixture)
    }

    private JiraServiceForWireMock buildJiraServiceForWireMock() {
        String jiraUrl = levaDocWiremock.jiraServer.server().baseUrl()
        new JiraServiceForWireMock(jiraUrl, WiremockServers.JIRA.getUser(), WiremockServers.JIRA.getPassword())
    }

    private DocGenService buildDocGenService(String docGenUrl) {
        if (!docGenUrl){
            docGenUrl = levaDocWiremock.docGenServer.server().baseUrl()
        }
        return new DocGenService(docGenUrl)
    }

    private NexusService buildNexusServiceForWireMock() {
        String nexusUrl = levaDocWiremock.nexusServer.server().baseUrl()
        return new NexusService(nexusUrl, WiremockServers.NEXUS.getUser(), WiremockServers.NEXUS.getPassword())
    }


}
